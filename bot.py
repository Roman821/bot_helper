import telebot
from telebot.types import (ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup,
                           InlineKeyboardButton)
import logging
import config
import time
from gpt import generate_story
from data import save_user_data, record_user_data, load_user_data

token = config.BOT_TOKEN
bot = telebot.TeleBot(token)

image_addresses = config.image_addresses

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="log_file.txt", filemode="w",
)


@bot.message_handler(commands=["start"])
def start_command(message):
    user_name = message.from_user.first_name
    messages_for_user = (f"–•–∞—é—à–∫–∏ {user_name}! –¢–µ–±–µ –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–∏–≤–µ—Ç —Ç–æ—Ç —Å–∞–º—ã–π –∑–µ–ª—ë–Ω—ã–π. –Ø —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! "
                         f"–í—ã–±–µ—Ä–∏ —Ç—É—Ç –≤–∞—Ä–∏–∫. –ú–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Å—å—ë–Ω –ø–∞–¥–∞–µ—Ç –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –µ—Å–ª–∏ —Ç—ã –≤–ø–µ—Ä–≤—ã–µ "
                         f"–∫–æ –º–Ω–µ –∑–∞—à—ë–ª.")
    bot.send_photo(message.chat.id, image_addresses["–ö–∞—Ä—Ç–∏–Ω–∫–∏"]["1"], messages_for_user,
                   reply_markup=create_replymarkup(["üìö–ü–æ—á–∏—Ç–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –æ—Å–≤–µ–∂–∏—Ç–µ–ª—è", "–ù–ê–ß–ò–ù–ê–ï–ú!",
                                                    "ü§ñ–ë—É–º–∞–∂–∫–∞ –æ–±–æ –º–Ω–µ"]))


@bot.message_handler(commands=["help"])
def help_command(message):
    message_text = message.text
    if message_text == "/help":
        bot.send_message(message.chat.id, "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ —É–±—Ä–∞–Ω—ã", reply_markup=ReplyKeyboardRemove())
    bot.send_message(message.chat.id, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ä–µ–ø–ª–∏–∫–æ–Ω–∞:\n\n"
                                      "–í–æ-–ø–µ—Ä–≤—ã—Ö, —Ç—ã —Ç–µ–ø–µ—Ä—å –ø–∞—Ü–∞–Ω! –ü–æ—ç—Ç–æ–º—É –µ—Å—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∫–∞ —Å–æ –º–Ω–æ–π –±–∞–∑–∞—Ä–∏—Ç—å: "
                                      "First - —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥, —Å–ø–æ—Å–æ–± –ø—Ä–∏–∫–æ–ª—å–Ω—ã–π, –Ω–æ –Ω–µ—É–¥–µ–Ω –¥–ª—è "
                                      "—á—É—à–ø–∞–Ω–æ–≤, —Ç–∞–∫ –∫–∞–∫ –î–£–ú–ê–¢–¨ –ù–ê–î–û ;) "
                                      "–¢—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞, –≤ –º–µ–Ω—é. –ò –≤—Ç–æ—Ä–æ–π "
                                      "—Å–ø–æ—Å–æ–± - –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –∂–º–∞–∫–∞–ª–∫–∏. –ö –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –ü–ò–°–¨–ú–ê–ú "
                                      "–±—É–¥—É—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∂–º–∞–∫–∞–ª–∫–∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏, –Ω—É–∂–Ω–æ –ª–∏—à—å –Ω–∞–∂–º–∞—Ç—å –Ω–∞ –Ω–∏—Ö. "
                                      "–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∫–∞–π—Ñ–æ–≤—ã–π, –Ω–æ –º–µ–Ω–µ–µ –ø—Ä–æ—à–∞—Ä–µ–Ω–Ω—ã–π. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∫ –¥—É—à–µ –ª–µ–∂–∏—Ç "
                                      "–∏–∑ –º–µ—Ç–æ–¥–æ–≤ –Ω–∞ —Å–≤–æ–π –≤–∫—É—Å.\n\n –ö–æ–≥–¥–∞ —Ç—ã —á–µ—Ä–∫–∞–µ—à—å /solve_task –∏–ª–∏ –∂–º–∞–∫–∞–µ—à—å "
                                      "–∂–º–∞–∫–∞–ª–∫—É ¬´–ù–ê–ß–ò–ù–ê–ï–ú!¬ª - —è –ø–æ–ø—Ä–æ—à—É —Ç–µ–±—è –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –∑–∞–ø—Ä–æ—Å, —Ç–æ –µ—Å—Ç—å,"
                                      "—Ç–µ–∫—Å—Ç –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —è –ø–æ–π–º—É —á–µ–≥–æ —Ç–µ –Ω–∞–¥–æ–±–Ω–æ. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ "
                                      "—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å –∑–∞–ø—Ä–æ—Å, —Ç–µ–±–µ —Ç—Ä—ç–±–∞ –±—É–¥–µ—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –æ–±—ã—á–Ω–æ —ç—Ç–æ "
                                      "–∑–∞–Ω–∏–º–∞–µ—Ç –æ–∫–æ–ª–æ 3-5 –º–∏–Ω—É—Ç. –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è —è –∑–∞–∫–∏–Ω—É —Ç–µ–±–µ —Ç–≤–æ–π "
                                      "–æ—Ç–≤–µ—Ç;\n‚Äî –ö–æ–º–∞–Ω–¥–∞ /continue –∏–ª–∏ –∂–º–∞–∫–∞–ª–∫–∞ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª - –Ω—É–∂–Ω–∞ –≤ —Ç–µ—Ö —Å–ª—É—á–∞—è—Ö, "
                                      "–∫–æ–≥–¥–∞ —è –Ω–µ –¥–æ–ø–∏—Å–∞–ª –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –∑–∞–≤–µ—Ä—à–∏–ª –æ—Ç–≤–µ—Ç –¥–æ "
                                      "–∫–æ–Ω—Ü–∞, —Ç–æ —Ç—ã–∫–∞–π —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É.\n‚Äî –ö–æ–º–∞–Ω–¥–∞ /end_dialog –∏–ª–∏ "
                                      "–∫–Ω–æ–ø–∫–∞ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å¬ª - –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º, –∏ –æ–Ω –∑–∞–±—ã–≤–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ "
                                      "—Å–æ–æ–±—â–µ–Ω–∏—è.\n‚Äî –ö–æ–º–∞–Ω–¥–∞ /reset –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ¬´–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–Ω–æ–º–∞¬ª - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç "
                                      "–º–µ–Ω—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–±—è –∫ –Ω–∞—á–∞–ª—É.")


@bot.message_handler(commands=["about"])
def about_command(message):
    message_text = message.text
    if message_text == "/about":
        bot.send_message(message.chat.id, "–ñ–º–∞–∫–∞–ª–∫–∏ –±—ã–ª–∏ —É–±—Ä–∞–Ω—ã", reply_markup=ReplyKeyboardRemove())
    bot.send_message(message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞:\n\n‚Äî –≠—Ç–æ—Ç –¥–æ–º–∞—à–Ω–∏–π —Ä–µ–ø–ª–∏–∫–æ–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤–æ –≤—Å—è–∫–∏—Ö "
                                      "—Å–∏—Ç—É–∞—Ü–∏—è—Ö. –ë–ª–∞–≥–æ–¥–∞—Ä—è —Å–≤–æ–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º, –∑–µ–ª—ë–Ω—ã–π –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é "
                                      "–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏—è—Ö –∏ –∏–¥–µ—è—Ö. –û–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã "
                                      "—Ä–∞–∑–≤–∏—Ç–∏—è —Å—é–∂–µ—Ç–∞, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –∏–¥–µ–π. –¢–∞–∫ –∂–µ –º–æ–∂–µ—Ç –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—á–∏–µ –≤–æ–ø—Ä–æ—Å–∏–∫–∏")


@bot.message_handler(commands=['debug'])
def send_logs(message):
    with open("log_file.txt", "rb") as f:
        bot.send_document(message.chat.id, f)


def create_replymarkup(button_labels):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for label in button_labels:
        markup.add(KeyboardButton(label))
    return markup


def create_inlinemarkup(button_labels):
    markup = InlineKeyboardMarkup()
    for label in button_labels:
        markup.add(InlineKeyboardButton(label, callback_data=label))
    return markup


@bot.message_handler(commands=['end_dialog'])
@bot.callback_query_handler(func=lambda call: call.data == '–ó–∞–≤–µ—Ä—à–∏—Ç—å')
def end_dialog(message):
    user_id = str(message.from_user.id)
    user_data = load_user_data()
    user_info = user_data.get(user_id, {})
    record_user_data(message)
    if isinstance(message, telebot.types.CallbackQuery):
        message = message.message
        pass
    if user_id not in user_data or user_info["progress"] == "user_first_response":
        bot.send_message(message.chat.id, "–ê —Ç—ã —Å–Ω–∞—á–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–∏—à–∏ ;)")
        bot.register_next_step_handler(message, get_promt)
        return
    answer = generate_story("–ó–∞–≤–µ—Ä—à–∏—Ç—å")
    if isinstance(answer, str):
        bot.send_message(message.chat.id, answer)

    else:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {answer}")
    return


@bot.message_handler(commands=['continue'])
@bot.callback_query_handler(func=lambda call: call.data == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
def continue_commands(message):
    user_id = str(message.from_user.id)
    user_data = load_user_data()
    user_info = user_data.get(user_id, {})
    record_user_data(message)
    if user_id not in user_data or user_info["progress"] == "user_first_response":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å")
        bot.register_next_step_handler(message, get_promt)
        return
    if isinstance(message, telebot.types.CallbackQuery):
        message = message.message
        pass
    bot.send_message(message.chat.id, "–ù–∞–¥ —ç—Ç–æ–π –∑–∞–¥–∞—á–∫–æ–π —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞—à–∏ —Ä–µ–ø–ª–∏–∫–æ–Ω—ã."
                                      "–ó–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∏—Å–ª–∏–º 5 –±–æ–Ω—É—Å–æ–≤ —Å–ø–∞—Å–∏–±–æ!"
                     )
    answer = generate_story("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    if isinstance(answer, str):
        bot.send_message(message.chat.id, "–õ—è, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å:")
        time.sleep(1)
        bot.send_message(message.chat.id, answer, reply_markup=create_inlinemarkup(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å",
                                                                                    "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"]))
    else:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {answer}")
    bot.register_next_step_handler(message, get_promt)


@bot.message_handler(commands=["reset"])
@bot.callback_query_handler(func=lambda call: call.data == '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–µ–ø–ª–∏–∫–æ–Ω–∞')
def reset_command(message):
    record_user_data(message)
    if isinstance(message, telebot.types.CallbackQuery):
        message = message.message
        pass
    bot.send_message(message.chat.id, "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–µ–ª—ë–Ω–æ–≥–æ . . .", reply_markup=ReplyKeyboardRemove())
    time.sleep(3)
    start_command(message)


@bot.message_handler(commands=["solve_task"])
def solve_task_command(message):
    bot.send_message(message.chat.id, "–ù–∞—á–µ—Ä–∫–∞–π —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å:")
    bot.register_next_step_handler(message, get_promt)


@bot.message_handler(content_types=["text"])
def user_first_response(message):
    message_text = message.text
    if message_text == "üìö–ü–æ—á–∏—Ç–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –æ—Å–≤–µ–∂–∏—Ç–µ–ª—è":
        help_command(message)
        bot.send_message(message.chat.id, "–ü–æ—á–∏—Ç–∞–π –∏ –∑–∞—Ç–µ–º –∂–º–∞–∫–∞–π –Ω–∞ —Ç—ã–∫–∞–ª–∫—É",
                         reply_markup=create_replymarkup(["–ü—Ä–æ—á—ë–ª_–ª–∞ —Å–æ—Å—Ç–∞–≤ –∏ –≥–æ—Ç–æ–≤_–∞ –∫ –∑–∞–ø—É—Å–∫—É!"]))
    elif message_text == "ü§ñ–ë—É–º–∞–∂–∫–∞ –æ–±–æ –º–Ω–µ":
        about_command(message)
        bot.send_message(message.chat.id, "–ë—É–º–∞–∂–∫–∞ –æ–±–æ –º–Ω–µ",
                         reply_markup=create_replymarkup(["–ü—Ä–æ—á–∏—Ç–∞–ª_–∞ –∏ –≥–æ—Ç–æ–≤_–∞!"]))
    elif message_text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—Å—è–∫–∏–µ –±—É–º–∞–∂–∫–∏ –∏ –Ω–∞—á–∞—Ç—å":
        bot.send_message(message.chat.id, "–°—É–ø–µ—Ä!")
        time.sleep(1)
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å–∏–∫:")
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–º–∞–∫–∞–ª–∫—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ —Ç—ã–∫–Ω—É—Ç—å")
        return
    record_user_data(message)
    bot.register_next_step_handler(message, get_promt)


def get_promt(message):
    message_text = message.text
    user_id = str(message.from_user.id)
    user_data = load_user_data()
    user_info = user_data.get(user_id, {})
    if message_text in ["–ü—Ä–æ—á—ë–ª_–ª–∞ —Å–æ—Å—Ç–∞–≤ –∏ –≥–æ—Ç–æ–≤_–∞ –∫ –∑–∞–ø—É—Å–∫—É!", "–ü—Ä–æ—á–∏—Ç–∞–ª_–∞ –∏ –≥–æ—Ç–æ–≤_–∞!"]:
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å:")
        bot.register_next_step_handler(message, get_promt)
        return
    if message.content_type != "text":
        bot.send_message(message.chat.id, "–ê –Ω—É-–∫–∞ –ø–∏—à–∏ –ø–æ —Ä—É—Å—Å–∫–∏!")
        bot.register_next_step_handler(message, get_promt)
        return
    user_info["progress"] = "get_promt"
    save_user_data(user_data)
    user_promt = message_text
    bot.send_message(message.chat.id, "–ù–∞–¥ —Ä–∞—Å—Å–∫–∞–∑–æ–º –ø–∞—à—É—Ç —Ä–µ–ø–ª–∏–∫–æ–Ω—ã. –ó–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞–¥–∏–º 5 –±–æ–Ω—É—Å–æ–≤ —Å–ø–∞—Å–∏–±–æ!", )
    answer = generate_story(user_promt)
    if isinstance(answer, str):
        bot.send_message(message.chat.id, "–õ–æ–≤–∏ –æ—Ç–≤–µ—Ç!")
        time.sleep(1)
        bot.send_message(message.chat.id, answer, reply_markup=create_inlinemarkup(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å",
                                                                                    "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–µ–ª—ë–Ω–æ–≥–æ"]))
    else:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {answer}")
    if user_info["progress"] != "get_promt":
        bot.register_next_step_handler(message, get_promt)
        return


bot.polling(timeout=60)
